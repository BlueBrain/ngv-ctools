import os
from pathlib import Path

import numpy as np
from numpy import testing as npt

from ngv_ctools.endfeet_reconstruction.fmm_growing import solve


DATA_DIRECTORY = Path(__file__).parent / Path('data')

def _print_plane(row_size, expected_groups, groups):

    class Colors:

        RED = '\u001b[31m'
        CYAN = '\u001b[36m'
        GREEN = '\u001b[32m'
        YELLOW = '\u001b[33m'
        END  = '\033[0m'

    def row2str(row):
        return ' '.join([f'{colors[group]}{group:>2}{Colors.END}' for group in row])

    colors = {0: Colors.RED, 1: Colors.CYAN, 2:Colors.GREEN, 3: Colors.YELLOW,  -1: ''}

    matrix1 = expected_groups.reshape(-1, row_size)
    matrix2 = groups.reshape(-1, row_size)

    txt = ' ' * 5 + 'Expected' + ' ' * 5 + '\t' + ' ' * 6 + 'Result\n'

    for row1, row2 in zip(matrix1, matrix2):
        txt += row2str(row1) + '\t' + row2str(row2) + '\n'

    print('Expected:', repr(expected_groups))
    print('Result  :', repr(groups))
    print(txt)

def _assign_vertex_neighbors(mesh):
    '''assign the neighbors for each vertex'''
    neighbors = mesh.vv_indices()
    mask = neighbors >= 0
    nn_offsets = np.count_nonzero(mask.reshape(neighbors.shape), axis=1)
    nn_offsets = np.hstack(((0, ), np.cumsum(nn_offsets))).astype(np.long)
    neighbors = neighbors[mask].astype(np.long)
    v_xyz = mesh.points().astype(np.float32)

    return neighbors, v_xyz, nn_offsets


def plane_10x10():

    #filepath = os.path.join(DATA_DIRECTORY, 'plane_10x10.obj')

    #mesh = openmesh.read_trimesh(filepath)
    #neighbors, xyz, nn_offsets = _assign_vertex_neighbors(mesh)
    neighbors = np.array([
        10,  1,  0, 10, 11,  2,  1, 11, 12,  3,  2, 12, 13,  4,  3, 13, 14,
        5,  4, 14, 15,  6,  5, 15, 16,  7,  6, 16, 17,  8,  7, 17, 18,  9,
        8, 18, 19, 20, 11,  1,  0, 21, 12,  2,  1, 10, 20, 22, 13,  3,  2,
       11, 21, 23, 14,  4,  3, 12, 22, 24, 15,  5,  4, 13, 23, 25, 16,  6,
        5, 14, 24, 26, 17,  7,  6, 15, 25, 27, 18,  8,  7, 16, 26, 28, 19,
        9,  8, 17, 27,  9, 18, 28, 29, 30, 21, 11, 10, 31, 22, 12, 11, 20,
       30, 32, 23, 13, 12, 21, 31, 33, 24, 14, 13, 22, 32, 34, 25, 15, 14,
       23, 33, 35, 26, 16, 15, 24, 34, 36, 27, 17, 16, 25, 35, 37, 28, 18,
       17, 26, 36, 38, 29, 19, 18, 27, 37, 19, 28, 38, 39, 40, 31, 21, 20,
       41, 32, 22, 21, 30, 40, 42, 33, 23, 22, 31, 41, 43, 34, 24, 23, 32,
       42, 44, 35, 25, 24, 33, 43, 45, 36, 26, 25, 34, 44, 46, 37, 27, 26,
       35, 45, 47, 38, 28, 27, 36, 46, 48, 39, 29, 28, 37, 47, 29, 38, 48,
       49, 50, 41, 31, 30, 51, 42, 32, 31, 40, 50, 52, 43, 33, 32, 41, 51,
       53, 44, 34, 33, 42, 52, 54, 45, 35, 34, 43, 53, 55, 46, 36, 35, 44,
       54, 56, 47, 37, 36, 45, 55, 57, 48, 38, 37, 46, 56, 58, 49, 39, 38,
       47, 57, 39, 48, 58, 59, 60, 51, 41, 40, 61, 52, 42, 41, 50, 60, 62,
       53, 43, 42, 51, 61, 63, 54, 44, 43, 52, 62, 64, 55, 45, 44, 53, 63,
       65, 56, 46, 45, 54, 64, 66, 57, 47, 46, 55, 65, 67, 58, 48, 47, 56,
       66, 68, 59, 49, 48, 57, 67, 49, 58, 68, 69, 70, 61, 51, 50, 71, 62,
       52, 51, 60, 70, 72, 63, 53, 52, 61, 71, 73, 64, 54, 53, 62, 72, 74,
       65, 55, 54, 63, 73, 75, 66, 56, 55, 64, 74, 76, 67, 57, 56, 65, 75,
       77, 68, 58, 57, 66, 76, 78, 69, 59, 58, 67, 77, 59, 68, 78, 79, 80,
       71, 61, 60, 81, 72, 62, 61, 70, 80, 82, 73, 63, 62, 71, 81, 83, 74,
       64, 63, 72, 82, 84, 75, 65, 64, 73, 83, 85, 76, 66, 65, 74, 84, 86,
       77, 67, 66, 75, 85, 87, 78, 68, 67, 76, 86, 88, 79, 69, 68, 77, 87,
       69, 78, 88, 89, 90, 81, 71, 70, 91, 82, 72, 71, 80, 90, 92, 83, 73,
       72, 81, 91, 93, 84, 74, 73, 82, 92, 94, 85, 75, 74, 83, 93, 95, 86,
       76, 75, 84, 94, 96, 87, 77, 76, 85, 95, 97, 88, 78, 77, 86, 96, 98,
       89, 79, 78, 87, 97, 79, 88, 98, 99, 91, 81, 80, 92, 82, 81, 90, 93,
       83, 82, 91, 94, 84, 83, 92, 95, 85, 84, 93, 96, 86, 85, 94, 97, 87,
       86, 95, 98, 88, 87, 96, 99, 89, 88, 97, 89, 98])

    xyz = np.array([
       [-1.      , -1.      , -0.      ],
       [-0.777778, -1.      , -0.      ],
       [-0.555556, -1.      , -0.      ],
       [-0.333333, -1.      , -0.      ],
       [-0.111111, -1.      , -0.      ],
       [ 0.111111, -1.      , -0.      ],
       [ 0.333333, -1.      , -0.      ],
       [ 0.555556, -1.      , -0.      ],
       [ 0.777778, -1.      , -0.      ],
       [ 1.      , -1.      , -0.      ],
       [-1.      , -0.777778, -0.      ],
       [-0.777778, -0.777778, -0.      ],
       [-0.555556, -0.777778, -0.      ],
       [-0.333333, -0.777778, -0.      ],
       [-0.111111, -0.777778, -0.      ],
       [ 0.111111, -0.777778, -0.      ],
       [ 0.333333, -0.777778, -0.      ],
       [ 0.555556, -0.777778, -0.      ],
       [ 0.777778, -0.777778, -0.      ],
       [ 1.      , -0.777778, -0.      ],
       [-1.      , -0.555556, -0.      ],
       [-0.777778, -0.555556, -0.      ],
       [-0.555556, -0.555556, -0.      ],
       [-0.333333, -0.555556, -0.      ],
       [-0.111111, -0.555556, -0.      ],
       [ 0.111111, -0.555556, -0.      ],
       [ 0.333333, -0.555556, -0.      ],
       [ 0.555556, -0.555556, -0.      ],
       [ 0.777778, -0.555556, -0.      ],
       [ 1.      , -0.555556, -0.      ],
       [-1.      , -0.333333, -0.      ],
       [-0.777778, -0.333333, -0.      ],
       [-0.555556, -0.333333, -0.      ],
       [-0.333333, -0.333333, -0.      ],
       [-0.111111, -0.333333, -0.      ],
       [ 0.111111, -0.333333, -0.      ],
       [ 0.333333, -0.333333, -0.      ],
       [ 0.555556, -0.333333, -0.      ],
       [ 0.777778, -0.333333, -0.      ],
       [ 1.      , -0.333333, -0.      ],
       [-1.      , -0.111111, -0.      ],
       [-0.777778, -0.111111, -0.      ],
       [-0.555556,-0.111111, -0.      ],
       [-0.333333, -0.111111, -0.      ],
       [-0.111111, -0.111111, -0.      ],
       [ 0.111111, -0.111111, -0.      ],
       [ 0.333333, -0.111111, -0.      ],
       [ 0.555556, -0.111111, -0.      ],
       [ 0.777778, -0.111111, -0.      ],
       [ 1.      , -0.111111, -0.      ],
       [-1.      ,  0.111111,  0.      ],
       [-0.777778,  0.111111,  0.      ],
       [-0.555556,  0.111111,  0.      ],
       [-0.333333,  0.111111,  0.      ],
       [-0.111111,  0.111111,  0.      ],
       [ 0.111111,  0.111111,  0.      ],
       [ 0.333333,  0.111111,  0.      ],
       [ 0.555556,  0.111111,  0.      ],
       [ 0.777778,  0.111111,  0.      ],
       [ 1.      ,  0.111111,  0.      ],
       [-1.      ,  0.333333,  0.      ],
       [-0.777778,  0.333333,  0.      ],
       [-0.555556,  0.333333,  0.      ],
       [-0.333333,  0.333333,  0.      ],
       [-0.111111,  0.333333,  0.      ],
       [ 0.111111,  0.333333,  0.      ],
       [ 0.333333,  0.333333,  0.      ],
       [ 0.555556,  0.333333,  0.      ],
       [ 0.777778,  0.333333,  0.      ],
       [ 1.      ,  0.333333,  0.      ],
       [-1.      ,  0.555556,  0.      ],
       [-0.777778,  0.555556,  0.      ],
       [-0.555556,  0.555556,  0.      ],
       [-0.333333,  0.555556,  0.      ],
       [-0.111111,  0.555556,  0.      ],
       [ 0.111111,  0.555556,  0.      ],
       [ 0.333333,  0.555556,  0.      ],
       [ 0.555556,  0.555556,  0.      ],
       [ 0.777778,  0.555556,  0.      ],
       [ 1.      ,  0.555556,  0.      ],
       [-1.      ,  0.777778,  0.      ],
       [-0.777778,  0.777778,  0.      ],
       [-0.555556,  0.777778,  0.      ],
       [-0.333333,  0.777778,  0.      ],
       [-0.111111,  0.777778,  0.      ],
       [ 0.111111,  0.777778,  0.      ],
       [ 0.333333,  0.777778,  0.      ],
       [ 0.555556,  0.777778,  0.      ],
       [ 0.777778,  0.777778,  0.      ],
       [ 1.      ,  0.777778,  0.      ],
       [-1.      ,  1.      ,  0.      ],
       [-0.777778,  1.      ,  0.      ],
       [-0.555556,  1.      ,  0.      ],
       [-0.333333,  1.      ,  0.      ],
       [-0.111111,  1.      ,  0.      ],
       [ 0.111111,  1.      ,  0.      ],
       [ 0.333333,  1.      ,  0.      ],
       [ 0.555556,  1.      ,  0.      ],
       [ 0.777778,  1.      ,  0.      ],
       [ 1.      ,  1.      ,  0.      ]], dtype=np.float32)


    nn_offsets = np.array([
        0,   2,   6,  10,  14,  18,  22,  26,  30,  34,  37,  41,  47,
        53,  59,  65,  71,  77,  83,  89,  93,  97, 103, 109, 115, 121,
       127, 133, 139, 145, 149, 153, 159, 165, 171, 177, 183, 189, 195,
       201, 205, 209, 215, 221, 227, 233, 239, 245, 251, 257, 261, 265,
       271, 277, 283, 289, 295, 301, 307, 313, 317, 321, 327, 333, 339,
       345, 351, 357, 363, 369, 373, 377, 383, 389, 395, 401, 407, 413,
       419, 425, 429, 433, 439, 445, 451, 457, 463, 469, 475, 481, 485,
       488, 492, 496, 500, 504, 508, 512, 516, 520, 522])

    #n_vertices = 100
    #n_seeds = len(seeds)

    #v_status = np.full(n_vertices, fill_value=-1, dtype=np.long)
    #v_group_index = np.full(n_vertices, fill_value=-1, dtype=np.long)
    #v_travel_time = np.full(n_vertices, fill_value=np.inf, dtype=np.float32)

    #v_group_index[seeds] = np.arange(len(seeds))
    #v_status[seeds] = 1
    #v_travel_time[seeds] = 0.0

    return neighbors , nn_offsets, xyz




def test_solve__plane_10x10_two_seeds():

    seed_vertices = np.array([0, 99])
    neighbors, offsets, xyz = plane_10x10()

    v_group_index, v_travel_times, v_status = solve(neighbors, offsets, xyz, seed_vertices, 1000000.)

    expected_ids = np.array(
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
           0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
           0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
           0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
           0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
           0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
           0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
           0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
           0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
           0, 1, 1, 1, 1, 1, 1, 1, 1, 1])

    assert np.all(expected_ids == v_group_index), _print_plane(10, expected_ids, v_group_index)
    assert np.all(v_status == 1) # all are visited


def test_solve__plane_10x10_four_seeds():

    seed_vertices = np.array([0, 9, 90, 99])
    neighbors, offsets, xyz = plane_10x10()

    v_group_index, v_travel_times, v_status = solve(neighbors, offsets, xyz, seed_vertices, 1000000.)

    expected_ids = np.array(
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
         0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
         0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
         0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
         0, 0, 0, 2, 2, 1, 1, 1, 1, 1,
         2, 2, 2, 2, 2, 1, 1, 3, 3, 3,
         2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
         2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
         2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
         2, 2, 2, 2, 2, 3, 3, 3, 3, 3])

    assert np.all(expected_ids == v_group_index), _print_plane(10, expected_ids, v_group_index)
    assert np.all(v_status == 1) # all are visited
